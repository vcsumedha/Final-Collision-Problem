//------------------------------------------------------------------------------
// <auto-generated>                                                             
//     This code was generated by a tool.                                       
//     Changes to this file may cause incorrect behavior and will be lost if    
//     the code is regenerated.                                                 
// </auto-generated>                                                            
//------------------------------------------------------------------------------
#pragma warning disable 436
#pragma warning disable 162
#pragma warning disable 1591
using System;
using Microsoft.Quantum.Core;
using Microsoft.Quantum.Intrinsic;
using Microsoft.Quantum.Intrinsic.Interfaces;
using Microsoft.Quantum.Simulation.Core;

[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Collision_Problem\",\"Name\":\"RandomNumberGenerator\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"D:\\\\Quantum\\\\Collision Problem\\\\Program.qs\",\"Position\":{\"Item1\":14,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":32}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"UnitType\"},\"ReturnType\":{\"Case\":\"Result\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Collision_Problem\",\"Name\":\"RandomNumberGenerator\"},\"Attributes\":[],\"SourceFile\":\"D:\\\\Quantum\\\\Collision Problem\\\\Program.qs\",\"Position\":{\"Item1\":14,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":32}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Collision_Problem\",\"Name\":\"RandomNumberGeneratorInRange\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"D:\\\\Quantum\\\\Collision Problem\\\\Program.qs\",\"Position\":{\"Item1\":24,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":39}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"K\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":40},\"Item2\":{\"Line\":1,\"Column\":41}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"Int\"},\"ReturnType\":{\"Case\":\"Int\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Collision_Problem\",\"Name\":\"RandomNumberGeneratorInRange\"},\"Attributes\":[],\"SourceFile\":\"D:\\\\Quantum\\\\Collision Problem\\\\Program.qs\",\"Position\":{\"Item1\":24,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":39}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Collision_Problem\",\"Name\":\"GeneraterandomInt\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"D:\\\\Quantum\\\\Collision Problem\\\\Program.qs\",\"Position\":{\"Item1\":39,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":28}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"x\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":29},\"Item2\":{\"Line\":1,\"Column\":30}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"k\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":38},\"Item2\":{\"Line\":1,\"Column\":39}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"Int\"},{\"Case\":\"Int\"}]]},\"ReturnType\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Int\"}]},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Collision_Problem\",\"Name\":\"GeneraterandomInt\"},\"Attributes\":[],\"SourceFile\":\"D:\\\\Quantum\\\\Collision Problem\\\\Program.qs\",\"Position\":{\"Item1\":39,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":28}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Collision_Problem\",\"Name\":\"GetRandomIndex\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"D:\\\\Quantum\\\\Collision Problem\\\\Program.qs\",\"Position\":{\"Item1\":56,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":25}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"max\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":26},\"Item2\":{\"Line\":1,\"Column\":29}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"Int\"},\"ReturnType\":{\"Case\":\"Int\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Collision_Problem\",\"Name\":\"GetRandomIndex\"},\"Attributes\":[],\"SourceFile\":\"D:\\\\Quantum\\\\Collision Problem\\\\Program.qs\",\"Position\":{\"Item1\":56,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":25}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Function\"},\"QualifiedName\":{\"Namespace\":\"Collision_Problem\",\"Name\":\"CompareSecond\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"D:\\\\Quantum\\\\Collision Problem\\\\Program.qs\",\"Position\":{\"Item1\":69,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":10},\"Item2\":{\"Line\":1,\"Column\":23}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"tuple1\"]},\"Type\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"Int\"},{\"Case\":\"Int\"}]]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":24},\"Item2\":{\"Line\":1,\"Column\":30}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"tuple2\"]},\"Type\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"Int\"},{\"Case\":\"Int\"}]]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":45},\"Item2\":{\"Line\":1,\"Column\":51}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"Int\"},{\"Case\":\"Int\"}]]},{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"Int\"},{\"Case\":\"Int\"}]]}]]},\"ReturnType\":{\"Case\":\"Bool\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Collision_Problem\",\"Name\":\"CompareSecond\"},\"Attributes\":[],\"SourceFile\":\"D:\\\\Quantum\\\\Collision Problem\\\\Program.qs\",\"Position\":{\"Item1\":69,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":10},\"Item2\":{\"Line\":1,\"Column\":23}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Collision_Problem\",\"Name\":\"GroverSearch\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"D:\\\\Quantum\\\\Collision Problem\\\\Program.qs\",\"Position\":{\"Item1\":80,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":23}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"F\"]},\"Type\":{\"Case\":\"Function\",\"Fields\":[{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"Int\"},{\"Case\":\"Int\"}]]},{\"Case\":\"Int\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":24},\"Item2\":{\"Line\":1,\"Column\":25}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"N\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":49},\"Item2\":{\"Line\":1,\"Column\":50}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"table\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Int\"}]}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":57},\"Item2\":{\"Line\":1,\"Column\":62}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"Function\",\"Fields\":[{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"Int\"},{\"Case\":\"Int\"}]]},{\"Case\":\"Int\"}]},{\"Case\":\"Int\"},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Int\"}]}]}]]},\"ReturnType\":{\"Case\":\"Int\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Collision_Problem\",\"Name\":\"GroverSearch\"},\"Attributes\":[],\"SourceFile\":\"D:\\\\Quantum\\\\Collision Problem\\\\Program.qs\",\"Position\":{\"Item1\":80,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":23}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Function\"},\"QualifiedName\":{\"Namespace\":\"Collision_Problem\",\"Name\":\"IsMarked\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"D:\\\\Quantum\\\\Collision Problem\\\\Program.qs\",\"Position\":{\"Item1\":105,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":10},\"Item2\":{\"Line\":1,\"Column\":18}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"F\"]},\"Type\":{\"Case\":\"Function\",\"Fields\":[{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"Int\"},{\"Case\":\"Int\"}]]},{\"Case\":\"Int\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":19},\"Item2\":{\"Line\":1,\"Column\":20}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"x0\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":43},\"Item2\":{\"Line\":1,\"Column\":45}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"table\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Int\"}]}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":52},\"Item2\":{\"Line\":1,\"Column\":57}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"n\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":68},\"Item2\":{\"Line\":1,\"Column\":69}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"Function\",\"Fields\":[{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"Int\"},{\"Case\":\"Int\"}]]},{\"Case\":\"Int\"}]},{\"Case\":\"Int\"},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Int\"}]}]},{\"Case\":\"Int\"}]]},\"ReturnType\":{\"Case\":\"Int\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Collision_Problem\",\"Name\":\"IsMarked\"},\"Attributes\":[],\"SourceFile\":\"D:\\\\Quantum\\\\Collision Problem\\\\Program.qs\",\"Position\":{\"Item1\":105,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":10},\"Item2\":{\"Line\":1,\"Column\":18}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Collision_Problem\",\"Name\":\"Oracle\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"D:\\\\Quantum\\\\Collision Problem\\\\Program.qs\",\"Position\":{\"Item1\":114,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":17}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"F\"]},\"Type\":{\"Case\":\"Function\",\"Fields\":[{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"Int\"},{\"Case\":\"Int\"}]]},{\"Case\":\"Int\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":18},\"Item2\":{\"Line\":1,\"Column\":19}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"mark\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":42},\"Item2\":{\"Line\":1,\"Column\":46}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"x0\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":58},\"Item2\":{\"Line\":1,\"Column\":60}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"L\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Int\"}]}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":67},\"Item2\":{\"Line\":1,\"Column\":68}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"n\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":78},\"Item2\":{\"Line\":1,\"Column\":79}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"Function\",\"Fields\":[{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"Int\"},{\"Case\":\"Int\"}]]},{\"Case\":\"Int\"}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"Int\"},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Int\"}]}]},{\"Case\":\"Int\"}]]},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Collision_Problem\",\"Name\":\"Oracle\"},\"Attributes\":[],\"SourceFile\":\"D:\\\\Quantum\\\\Collision Problem\\\\Program.qs\",\"Position\":{\"Item1\":114,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":17}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Collision_Problem\",\"Name\":\"Diffusion\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"D:\\\\Quantum\\\\Collision Problem\\\\Program.qs\",\"Position\":{\"Item1\":127,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":20}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"numBits\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":21},\"Item2\":{\"Line\":1,\"Column\":28}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"mark\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":36},\"Item2\":{\"Line\":1,\"Column\":40}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"Int\"},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]}]]},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Collision_Problem\",\"Name\":\"Diffusion\"},\"Attributes\":[],\"SourceFile\":\"D:\\\\Quantum\\\\Collision Problem\\\\Program.qs\",\"Position\":{\"Item1\":127,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":20}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Collision_Problem\",\"Name\":\"Collision\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"D:\\\\Quantum\\\\Collision Problem\\\\Program.qs\",\"Position\":{\"Item1\":145,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":20}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"F\"]},\"Type\":{\"Case\":\"Function\",\"Fields\":[{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"Int\"},{\"Case\":\"Int\"}]]},{\"Case\":\"Int\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":21},\"Item2\":{\"Line\":1,\"Column\":22}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"KI\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":46},\"Item2\":{\"Line\":1,\"Column\":48}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"Function\",\"Fields\":[{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"Int\"},{\"Case\":\"Int\"}]]},{\"Case\":\"Int\"}]},{\"Case\":\"Int\"}]]},\"ReturnType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"Int\"},{\"Case\":\"Int\"}]]},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Collision_Problem\",\"Name\":\"Collision\"},\"Attributes\":[],\"SourceFile\":\"D:\\\\Quantum\\\\Collision Problem\\\\Program.qs\",\"Position\":{\"Item1\":145,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":20}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Function\"},\"QualifiedName\":{\"Namespace\":\"Collision_Problem\",\"Name\":\"Fun\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"D:\\\\Quantum\\\\Collision Problem\\\\Program.qs\",\"Position\":{\"Item1\":192,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":10},\"Item2\":{\"Line\":1,\"Column\":13}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"x\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":14},\"Item2\":{\"Line\":1,\"Column\":15}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"N\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":23},\"Item2\":{\"Line\":1,\"Column\":24}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"Int\"},{\"Case\":\"Int\"}]]},\"ReturnType\":{\"Case\":\"Int\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Collision_Problem\",\"Name\":\"Fun\"},\"Attributes\":[],\"SourceFile\":\"D:\\\\Quantum\\\\Collision Problem\\\\Program.qs\",\"Position\":{\"Item1\":192,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":10},\"Item2\":{\"Line\":1,\"Column\":13}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Collision_Problem\",\"Name\":\"FindCollision\"},\"Attributes\":[{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Core\",\"Name\":\"EntryPoint\",\"Range\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":2},\"Item2\":{\"Line\":1,\"Column\":12}}]}}]},\"TypeIdRange\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":2},\"Item2\":{\"Line\":1,\"Column\":12}}]},\"Argument\":{\"Item1\":{\"Case\":\"UnitValue\"},\"Item2\":[],\"Item3\":{\"Case\":\"UnitType\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":12},\"Item2\":{\"Line\":1,\"Column\":14}}]}},\"Offset\":{\"Item1\":197,\"Item2\":4},\"Comments\":{\"OpeningComments\":[],\"ClosingComments\":[]}}],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"D:\\\\Quantum\\\\Collision Problem\\\\Program.qs\",\"Position\":{\"Item1\":198,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":24}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"UnitType\"},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Collision_Problem\",\"Name\":\"FindCollision\"},\"Attributes\":[],\"SourceFile\":\"D:\\\\Quantum\\\\Collision Problem\\\\Program.qs\",\"Position\":{\"Item1\":198,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":24}},\"Documentation\":[]}")]
#line hidden
namespace Collision_Problem
{
    [SourceLocation("D:\\Quantum\\Collision Problem\\Program.qs", OperationFunctor.Body, 15, 25)]
    public partial class RandomNumberGenerator : Operation<QVoid, Result>, ICallable
    {
        public RandomNumberGenerator(IOperationFactory m) : base(m)
        {
        }

        String ICallable.Name => "RandomNumberGenerator";
        String ICallable.FullName => "Collision_Problem.RandomNumberGenerator";
        protected Allocate Allocate__
        {
            get;
            set;
        }

        protected Release Release__
        {
            get;
            set;
        }

        protected IUnitary<Qubit> Microsoft__Quantum__Intrinsic__H
        {
            get;
            set;
        }

        protected ICallable<Qubit, Result> Microsoft__Quantum__Intrinsic__M
        {
            get;
            set;
        }

        public override Func<QVoid, Result> __Body__ => (__in__) =>
        {
#line hidden
            {
#line 17 "D:\\Quantum\\Collision Problem\\Program.qs"
                var q = Allocate__.Apply();
#line hidden
                bool __arg1__ = true;
                try
                {
#line 20 "D:\\Quantum\\Collision Problem\\Program.qs"
                    Microsoft__Quantum__Intrinsic__H.Apply(q);
#line 22 "D:\\Quantum\\Collision Problem\\Program.qs"
                    return Microsoft__Quantum__Intrinsic__M.Apply(q);
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release__.Apply(q);
                    }
                }
            }
        }

        ;
        public override void __Init__()
        {
            this.Allocate__ = this.__Factory__.Get<Allocate>(typeof(global::Microsoft.Quantum.Intrinsic.Allocate));
            this.Release__ = this.__Factory__.Get<Release>(typeof(global::Microsoft.Quantum.Intrinsic.Release));
            this.Microsoft__Quantum__Intrinsic__H = this.__Factory__.Get<IUnitary<Qubit>>(typeof(global::Microsoft.Quantum.Intrinsic.H));
            this.Microsoft__Quantum__Intrinsic__M = this.__Factory__.Get<ICallable<Qubit, Result>>(typeof(global::Microsoft.Quantum.Intrinsic.M));
        }

        public override IApplyData __DataIn__(QVoid data) => data;
        public override IApplyData __DataOut__(Result data) => new QTuple<Result>(data);
        public static System.Threading.Tasks.Task<Result> Run(IOperationFactory __m__)
        {
            return __m__.Run<RandomNumberGenerator, QVoid, Result>(QVoid.Instance);
        }
    }

    [SourceLocation("D:\\Quantum\\Collision Problem\\Program.qs", OperationFunctor.Body, 25, 40)]
    public partial class RandomNumberGeneratorInRange : Operation<Int64, Int64>, ICallable
    {
        public RandomNumberGeneratorInRange(IOperationFactory m) : base(m)
        {
        }

        String ICallable.Name => "RandomNumberGeneratorInRange";
        String ICallable.FullName => "Collision_Problem.RandomNumberGeneratorInRange";
        protected ICallable<Double, Int64> Microsoft__Quantum__Math__Ceiling
        {
            get;
            set;
        }

        protected ICallable<Double, Double> Microsoft__Quantum__Math__Lg
        {
            get;
            set;
        }

        protected ICallable<Int64, Double> Microsoft__Quantum__Convert__IntAsDouble
        {
            get;
            set;
        }

        protected Allocate Allocate__
        {
            get;
            set;
        }

        protected Release Release__
        {
            get;
            set;
        }

        protected ICallable Microsoft__Quantum__Canon__ApplyToEach
        {
            get;
            set;
        }

        protected IUnitary<Qubit> Microsoft__Quantum__Intrinsic__H
        {
            get;
            set;
        }

        protected ICallable<Microsoft.Quantum.Arithmetic.LittleEndian, Int64> Microsoft__Quantum__Arithmetic__MeasureInteger
        {
            get;
            set;
        }

        protected ICallable<IQArray<Qubit>, Microsoft.Quantum.Arithmetic.LittleEndian> Microsoft__Quantum__Arithmetic__LittleEndian
        {
            get;
            set;
        }

        public override Func<Int64, Int64> __Body__ => (__in__) =>
        {
            var K = __in__;
#line 26 "D:\\Quantum\\Collision Problem\\Program.qs"
            var n = Microsoft__Quantum__Math__Ceiling.Apply(Microsoft__Quantum__Math__Lg.Apply(Microsoft__Quantum__Convert__IntAsDouble.Apply(K)));
#line 27 "D:\\Quantum\\Collision Problem\\Program.qs"
            var result = -(1L);
#line 28 "D:\\Quantum\\Collision Problem\\Program.qs"
            while (true)
            {
#line hidden
                {
#line 29 "D:\\Quantum\\Collision Problem\\Program.qs"
                    var qubits = Allocate__.Apply(n);
#line hidden
                    bool __arg1__ = true;
                    try
                    {
#line 30 "D:\\Quantum\\Collision Problem\\Program.qs"
                        Microsoft__Quantum__Canon__ApplyToEach.Apply((Microsoft__Quantum__Intrinsic__H, qubits));
#line 31 "D:\\Quantum\\Collision Problem\\Program.qs"
                        var randomInt = Microsoft__Quantum__Arithmetic__MeasureInteger.Apply(new Microsoft.Quantum.Arithmetic.LittleEndian(qubits));
#line 32 "D:\\Quantum\\Collision Problem\\Program.qs"
                        if ((randomInt <= K))
                        {
#line 33 "D:\\Quantum\\Collision Problem\\Program.qs"
                            result = randomInt;
                        }
                    }
#line hidden
                    catch
                    {
                        __arg1__ = false;
                        throw;
                    }
#line hidden
                    finally
                    {
                        if (__arg1__)
                        {
#line hidden
                            Release__.Apply(qubits);
                        }
                    }
                }

                if ((result >= 0L))
                {
                    break;
                }
                else
                {
                }
            }

#line 37 "D:\\Quantum\\Collision Problem\\Program.qs"
            return result;
        }

        ;
        public override void __Init__()
        {
            this.Microsoft__Quantum__Math__Ceiling = this.__Factory__.Get<ICallable<Double, Int64>>(typeof(global::Microsoft.Quantum.Math.Ceiling));
            this.Microsoft__Quantum__Math__Lg = this.__Factory__.Get<ICallable<Double, Double>>(typeof(global::Microsoft.Quantum.Math.Lg));
            this.Microsoft__Quantum__Convert__IntAsDouble = this.__Factory__.Get<ICallable<Int64, Double>>(typeof(global::Microsoft.Quantum.Convert.IntAsDouble));
            this.Allocate__ = this.__Factory__.Get<Allocate>(typeof(global::Microsoft.Quantum.Intrinsic.Allocate));
            this.Release__ = this.__Factory__.Get<Release>(typeof(global::Microsoft.Quantum.Intrinsic.Release));
            this.Microsoft__Quantum__Canon__ApplyToEach = this.__Factory__.Get<ICallable>(typeof(global::Microsoft.Quantum.Canon.ApplyToEach<>));
            this.Microsoft__Quantum__Intrinsic__H = this.__Factory__.Get<IUnitary<Qubit>>(typeof(global::Microsoft.Quantum.Intrinsic.H));
            this.Microsoft__Quantum__Arithmetic__MeasureInteger = this.__Factory__.Get<ICallable<Microsoft.Quantum.Arithmetic.LittleEndian, Int64>>(typeof(global::Microsoft.Quantum.Arithmetic.MeasureInteger));
            this.Microsoft__Quantum__Arithmetic__LittleEndian = this.__Factory__.Get<ICallable<IQArray<Qubit>, Microsoft.Quantum.Arithmetic.LittleEndian>>(typeof(global::Microsoft.Quantum.Arithmetic.LittleEndian));
        }

        public override IApplyData __DataIn__(Int64 data) => new QTuple<Int64>(data);
        public override IApplyData __DataOut__(Int64 data) => new QTuple<Int64>(data);
        public static System.Threading.Tasks.Task<Int64> Run(IOperationFactory __m__, Int64 K)
        {
            return __m__.Run<RandomNumberGeneratorInRange, Int64, Int64>(K);
        }
    }

    [SourceLocation("D:\\Quantum\\Collision Problem\\Program.qs", OperationFunctor.Body, 40, 57)]
    public partial class GeneraterandomInt : Operation<(Int64,Int64), IQArray<Int64>>, ICallable
    {
        public GeneraterandomInt(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(Int64,Int64)>, IApplyData
        {
            public In((Int64,Int64) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits => null;
        }

        String ICallable.Name => "GeneraterandomInt";
        String ICallable.FullName => "Collision_Problem.GeneraterandomInt";
        protected ICallable Microsoft__Quantum__Arrays__ConstantArray
        {
            get;
            set;
        }

        protected ICallable<Int64, Int64> Microsoft__Quantum__Math__BitSizeI
        {
            get;
            set;
        }

        protected ICallable<QVoid, Result> RandomNumberGenerator__
        {
            get;
            set;
        }

        protected ICallable<IQArray<Result>, Int64> Microsoft__Quantum__Convert__ResultArrayAsInt
        {
            get;
            set;
        }

        public override Func<(Int64,Int64), IQArray<Int64>> __Body__ => (__in__) =>
        {
            var (x,k) = __in__;
#line 41 "D:\\Quantum\\Collision Problem\\Program.qs"
            var results = new QArray<Int64>(Microsoft__Quantum__Arrays__ConstantArray.Apply<IQArray<Int64>>((k, 0L)));
#line 42 "D:\\Quantum\\Collision Problem\\Program.qs"
            foreach (var i in new QRange(0L, (k - 1L)))
#line hidden
            {
#line 43 "D:\\Quantum\\Collision Problem\\Program.qs"
                var output = 0L;
#line 44 "D:\\Quantum\\Collision Problem\\Program.qs"
                while (true)
                {
#line 45 "D:\\Quantum\\Collision Problem\\Program.qs"
                    var bits = new QArray<Result>();
#line 46 "D:\\Quantum\\Collision Problem\\Program.qs"
                    foreach (var idxBit in new QRange(1L, Microsoft__Quantum__Math__BitSizeI.Apply(x)))
#line hidden
                    {
#line 47 "D:\\Quantum\\Collision Problem\\Program.qs"
                        bits = QArray<Result>.Add(bits, new QArray<Result>(RandomNumberGenerator__.Apply(QVoid.Instance)));
                    }

#line 49 "D:\\Quantum\\Collision Problem\\Program.qs"
                    output = Microsoft__Quantum__Convert__ResultArrayAsInt.Apply(bits?.Copy());
                    if ((output <= x))
                    {
                        break;
                    }
                    else
                    {
                    }
                }

#line 52 "D:\\Quantum\\Collision Problem\\Program.qs"
                results.Modify(i, output);
            }

#line 54 "D:\\Quantum\\Collision Problem\\Program.qs"
            return results;
        }

        ;
        public override void __Init__()
        {
            this.Microsoft__Quantum__Arrays__ConstantArray = this.__Factory__.Get<ICallable>(typeof(global::Microsoft.Quantum.Arrays.ConstantArray<>));
            this.Microsoft__Quantum__Math__BitSizeI = this.__Factory__.Get<ICallable<Int64, Int64>>(typeof(global::Microsoft.Quantum.Math.BitSizeI));
            this.RandomNumberGenerator__ = this.__Factory__.Get<ICallable<QVoid, Result>>(typeof(RandomNumberGenerator));
            this.Microsoft__Quantum__Convert__ResultArrayAsInt = this.__Factory__.Get<ICallable<IQArray<Result>, Int64>>(typeof(global::Microsoft.Quantum.Convert.ResultArrayAsInt));
        }

        public override IApplyData __DataIn__((Int64,Int64) data) => new In(data);
        public override IApplyData __DataOut__(IQArray<Int64> data) => data;
        public static System.Threading.Tasks.Task<IQArray<Int64>> Run(IOperationFactory __m__, Int64 x, Int64 k)
        {
            return __m__.Run<GeneraterandomInt, (Int64,Int64), IQArray<Int64>>((x, k));
        }
    }

    [SourceLocation("D:\\Quantum\\Collision Problem\\Program.qs", OperationFunctor.Body, 57, 70)]
    public partial class GetRandomIndex : Operation<Int64, Int64>, ICallable
    {
        public GetRandomIndex(IOperationFactory m) : base(m)
        {
        }

        String ICallable.Name => "GetRandomIndex";
        String ICallable.FullName => "Collision_Problem.GetRandomIndex";
        protected ICallable<Int64, Int64> Microsoft__Quantum__Math__BitSizeI
        {
            get;
            set;
        }

        protected ICallable<QVoid, Result> RandomNumberGenerator__
        {
            get;
            set;
        }

        protected ICallable<IQArray<Result>, Int64> Microsoft__Quantum__Convert__ResultArrayAsInt
        {
            get;
            set;
        }

        public override Func<Int64, Int64> __Body__ => (__in__) =>
        {
            var max = __in__;
#line 58 "D:\\Quantum\\Collision Problem\\Program.qs"
            var output = 0L;
#line 59 "D:\\Quantum\\Collision Problem\\Program.qs"
            while (true)
            {
#line 60 "D:\\Quantum\\Collision Problem\\Program.qs"
                var bits = new QArray<Result>();
#line 61 "D:\\Quantum\\Collision Problem\\Program.qs"
                foreach (var idxBit in new QRange(1L, Microsoft__Quantum__Math__BitSizeI.Apply(max)))
#line hidden
                {
#line 62 "D:\\Quantum\\Collision Problem\\Program.qs"
                    bits = QArray<Result>.Add(bits, new QArray<Result>(RandomNumberGenerator__.Apply(QVoid.Instance)));
                }

#line 64 "D:\\Quantum\\Collision Problem\\Program.qs"
                output = Microsoft__Quantum__Convert__ResultArrayAsInt.Apply(bits?.Copy());
                if ((output <= max))
                {
                    break;
                }
                else
                {
                }
            }

#line 66 "D:\\Quantum\\Collision Problem\\Program.qs"
            return output;
        }

        ;
        public override void __Init__()
        {
            this.Microsoft__Quantum__Math__BitSizeI = this.__Factory__.Get<ICallable<Int64, Int64>>(typeof(global::Microsoft.Quantum.Math.BitSizeI));
            this.RandomNumberGenerator__ = this.__Factory__.Get<ICallable<QVoid, Result>>(typeof(RandomNumberGenerator));
            this.Microsoft__Quantum__Convert__ResultArrayAsInt = this.__Factory__.Get<ICallable<IQArray<Result>, Int64>>(typeof(global::Microsoft.Quantum.Convert.ResultArrayAsInt));
        }

        public override IApplyData __DataIn__(Int64 data) => new QTuple<Int64>(data);
        public override IApplyData __DataOut__(Int64 data) => new QTuple<Int64>(data);
        public static System.Threading.Tasks.Task<Int64> Run(IOperationFactory __m__, Int64 max)
        {
            return __m__.Run<GetRandomIndex, Int64, Int64>(max);
        }
    }

    [SourceLocation("D:\\Quantum\\Collision Problem\\Program.qs", OperationFunctor.Body, 70, 81)]
    public partial class CompareSecond : Function<((Int64,Int64),(Int64,Int64)), Boolean>, ICallable
    {
        public CompareSecond(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<((Int64,Int64),(Int64,Int64))>, IApplyData
        {
            public In(((Int64,Int64),(Int64,Int64)) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits => null;
        }

        String ICallable.Name => "CompareSecond";
        String ICallable.FullName => "Collision_Problem.CompareSecond";
        public override Func<((Int64,Int64),(Int64,Int64)), Boolean> __Body__ => (__in__) =>
        {
            var (tuple1,tuple2) = __in__;
#line 71 "D:\\Quantum\\Collision Problem\\Program.qs"
            var (t_1,t_2) = tuple1;
#line 72 "D:\\Quantum\\Collision Problem\\Program.qs"
            var (t1,t2) = tuple2;
#line 73 "D:\\Quantum\\Collision Problem\\Program.qs"
            if ((t_2 < t2))
            {
#line 74 "D:\\Quantum\\Collision Problem\\Program.qs"
                return false;
            }
            else
            {
#line 77 "D:\\Quantum\\Collision Problem\\Program.qs"
                return true;
            }
        }

        ;
        public override void __Init__()
        {
        }

        public override IApplyData __DataIn__(((Int64,Int64),(Int64,Int64)) data) => new In(data);
        public override IApplyData __DataOut__(Boolean data) => new QTuple<Boolean>(data);
        public static System.Threading.Tasks.Task<Boolean> Run(IOperationFactory __m__, (Int64,Int64) tuple1, (Int64,Int64) tuple2)
        {
            return __m__.Run<CompareSecond, ((Int64,Int64),(Int64,Int64)), Boolean>((tuple1, tuple2));
        }
    }

    [SourceLocation("D:\\Quantum\\Collision Problem\\Program.qs", OperationFunctor.Body, 81, 106)]
    public partial class GroverSearch : Operation<(ICallable,Int64,IQArray<IQArray<Int64>>), Int64>, ICallable
    {
        public GroverSearch(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(ICallable,Int64,IQArray<IQArray<Int64>>)>, IApplyData
        {
            public In((ICallable,Int64,IQArray<IQArray<Int64>>) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits
            {
                get
                {
                    return ((IApplyData)Data.Item1)?.Qubits;
                }
            }
        }

        String ICallable.Name => "GroverSearch";
        String ICallable.FullName => "Collision_Problem.GroverSearch";
        protected ICallable<Double, Int64> Microsoft__Quantum__Math__Ceiling
        {
            get;
            set;
        }

        protected ICallable<Double, Double> Microsoft__Quantum__Math__Lg
        {
            get;
            set;
        }

        protected ICallable<Int64, Double> Microsoft__Quantum__Convert__IntAsDouble
        {
            get;
            set;
        }

        protected Allocate Allocate__
        {
            get;
            set;
        }

        protected Release Release__
        {
            get;
            set;
        }

        protected IAdjointable Microsoft__Quantum__Canon__ApplyToEachA
        {
            get;
            set;
        }

        protected IUnitary<Qubit> Microsoft__Quantum__Intrinsic__H
        {
            get;
            set;
        }

        protected ICallable<Int64, Int64> RandomNumberGeneratorInRange__
        {
            get;
            set;
        }

        protected ICallable Length__
        {
            get;
            set;
        }

        protected ICallable<(ICallable,IQArray<Qubit>,Int64,IQArray<IQArray<Int64>>,Int64), QVoid> Oracle__
        {
            get;
            set;
        }

        protected ICallable<(Int64,IQArray<Qubit>), QVoid> Diffusion__
        {
            get;
            set;
        }

        protected ICallable<Microsoft.Quantum.Arithmetic.LittleEndian, Int64> Microsoft__Quantum__Arithmetic__MeasureInteger
        {
            get;
            set;
        }

        protected ICallable<IQArray<Qubit>, Microsoft.Quantum.Arithmetic.LittleEndian> Microsoft__Quantum__Arithmetic__LittleEndian
        {
            get;
            set;
        }

        protected ICallable<IQArray<Qubit>, QVoid> ResetAll__
        {
            get;
            set;
        }

        public override Func<(ICallable,Int64,IQArray<IQArray<Int64>>), Int64> __Body__ => (__in__) =>
        {
            var (F,N,table) = __in__;
#line 83 "D:\\Quantum\\Collision Problem\\Program.qs"
            var numBits = Microsoft__Quantum__Math__Ceiling.Apply(Microsoft__Quantum__Math__Lg.Apply(Microsoft__Quantum__Convert__IntAsDouble.Apply(N)));
#line 84 "D:\\Quantum\\Collision Problem\\Program.qs"
            var result = 0L;
#line hidden
            {
#line 86 "D:\\Quantum\\Collision Problem\\Program.qs"
                var mark = Allocate__.Apply((numBits + 1L));
#line hidden
                bool __arg1__ = true;
                try
                {
#line 88 "D:\\Quantum\\Collision Problem\\Program.qs"
                    Microsoft__Quantum__Canon__ApplyToEachA.Apply((Microsoft__Quantum__Intrinsic__H, mark));
#line 91 "D:\\Quantum\\Collision Problem\\Program.qs"
                    var __qsVar0__numIterations__ = RandomNumberGeneratorInRange__.Apply(table.Length);
#line 92 "D:\\Quantum\\Collision Problem\\Program.qs"
                    var __qsVar1__x0__ = RandomNumberGeneratorInRange__.Apply(N);
#line 93 "D:\\Quantum\\Collision Problem\\Program.qs"
                    foreach (var __qsVar2__i__ in new QRange(1L, __qsVar0__numIterations__))
#line hidden
                    {
#line 94 "D:\\Quantum\\Collision Problem\\Program.qs"
                        Oracle__.Apply((F, mark, __qsVar1__x0__, table, N));
#line 95 "D:\\Quantum\\Collision Problem\\Program.qs"
                        Diffusion__.Apply((numBits, mark));
                    }

#line 99 "D:\\Quantum\\Collision Problem\\Program.qs"
                    result = Microsoft__Quantum__Arithmetic__MeasureInteger.Apply(new Microsoft.Quantum.Arithmetic.LittleEndian(mark.Slice(new QRange(0L, (numBits - 1L)))));
#line 100 "D:\\Quantum\\Collision Problem\\Program.qs"
                    ResetAll__.Apply(mark);
#line 81 "D:\\Quantum\\Collision Problem\\Program.qs"
                    Microsoft__Quantum__Canon__ApplyToEachA.Adjoint.Apply((Microsoft__Quantum__Intrinsic__H, mark));
#line 102 "D:\\Quantum\\Collision Problem\\Program.qs"
                    return result;
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release__.Apply(mark);
                    }
                }
            }
        }

        ;
        public override void __Init__()
        {
            this.Microsoft__Quantum__Math__Ceiling = this.__Factory__.Get<ICallable<Double, Int64>>(typeof(global::Microsoft.Quantum.Math.Ceiling));
            this.Microsoft__Quantum__Math__Lg = this.__Factory__.Get<ICallable<Double, Double>>(typeof(global::Microsoft.Quantum.Math.Lg));
            this.Microsoft__Quantum__Convert__IntAsDouble = this.__Factory__.Get<ICallable<Int64, Double>>(typeof(global::Microsoft.Quantum.Convert.IntAsDouble));
            this.Allocate__ = this.__Factory__.Get<Allocate>(typeof(global::Microsoft.Quantum.Intrinsic.Allocate));
            this.Release__ = this.__Factory__.Get<Release>(typeof(global::Microsoft.Quantum.Intrinsic.Release));
            this.Microsoft__Quantum__Canon__ApplyToEachA = this.__Factory__.Get<IAdjointable>(typeof(global::Microsoft.Quantum.Canon.ApplyToEachA<>));
            this.Microsoft__Quantum__Intrinsic__H = this.__Factory__.Get<IUnitary<Qubit>>(typeof(global::Microsoft.Quantum.Intrinsic.H));
            this.RandomNumberGeneratorInRange__ = this.__Factory__.Get<ICallable<Int64, Int64>>(typeof(RandomNumberGeneratorInRange));
            this.Length__ = this.__Factory__.Get<ICallable>(typeof(global::Microsoft.Quantum.Core.Length<>));
            this.Oracle__ = this.__Factory__.Get<ICallable<(ICallable,IQArray<Qubit>,Int64,IQArray<IQArray<Int64>>,Int64), QVoid>>(typeof(Oracle));
            this.Diffusion__ = this.__Factory__.Get<ICallable<(Int64,IQArray<Qubit>), QVoid>>(typeof(Diffusion));
            this.Microsoft__Quantum__Arithmetic__MeasureInteger = this.__Factory__.Get<ICallable<Microsoft.Quantum.Arithmetic.LittleEndian, Int64>>(typeof(global::Microsoft.Quantum.Arithmetic.MeasureInteger));
            this.Microsoft__Quantum__Arithmetic__LittleEndian = this.__Factory__.Get<ICallable<IQArray<Qubit>, Microsoft.Quantum.Arithmetic.LittleEndian>>(typeof(global::Microsoft.Quantum.Arithmetic.LittleEndian));
            this.ResetAll__ = this.__Factory__.Get<ICallable<IQArray<Qubit>, QVoid>>(typeof(global::Microsoft.Quantum.Intrinsic.ResetAll));
        }

        public override IApplyData __DataIn__((ICallable,Int64,IQArray<IQArray<Int64>>) data) => new In(data);
        public override IApplyData __DataOut__(Int64 data) => new QTuple<Int64>(data);
        public static System.Threading.Tasks.Task<Int64> Run(IOperationFactory __m__, ICallable F, Int64 N, IQArray<IQArray<Int64>> table)
        {
            return __m__.Run<GroverSearch, (ICallable,Int64,IQArray<IQArray<Int64>>), Int64>((F, N, table));
        }
    }

    [SourceLocation("D:\\Quantum\\Collision Problem\\Program.qs", OperationFunctor.Body, 106, 115)]
    public partial class IsMarked : Function<(ICallable,Int64,IQArray<IQArray<Int64>>,Int64), Int64>, ICallable
    {
        public IsMarked(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(ICallable,Int64,IQArray<IQArray<Int64>>,Int64)>, IApplyData
        {
            public In((ICallable,Int64,IQArray<IQArray<Int64>>,Int64) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits
            {
                get
                {
                    return ((IApplyData)Data.Item1)?.Qubits;
                }
            }
        }

        String ICallable.Name => "IsMarked";
        String ICallable.FullName => "Collision_Problem.IsMarked";
        protected ICallable Length__
        {
            get;
            set;
        }

        public override Func<(ICallable,Int64,IQArray<IQArray<Int64>>,Int64), Int64> __Body__ => (__in__) =>
        {
            var (F,x0,table,n) = __in__;
#line 107 "D:\\Quantum\\Collision Problem\\Program.qs"
            foreach (var i in new QRange(0L, (table.Length - 1L)))
#line hidden
            {
#line 108 "D:\\Quantum\\Collision Problem\\Program.qs"
                if (((x0 != table[i][0L]) && (F.Apply<Int64>((x0, n)) == table[i][1L])))
                {
#line 109 "D:\\Quantum\\Collision Problem\\Program.qs"
                    return 1L;
                }
            }

#line 112 "D:\\Quantum\\Collision Problem\\Program.qs"
            return 0L;
        }

        ;
        public override void __Init__()
        {
            this.Length__ = this.__Factory__.Get<ICallable>(typeof(global::Microsoft.Quantum.Core.Length<>));
        }

        public override IApplyData __DataIn__((ICallable,Int64,IQArray<IQArray<Int64>>,Int64) data) => new In(data);
        public override IApplyData __DataOut__(Int64 data) => new QTuple<Int64>(data);
        public static System.Threading.Tasks.Task<Int64> Run(IOperationFactory __m__, ICallable F, Int64 x0, IQArray<IQArray<Int64>> table, Int64 n)
        {
            return __m__.Run<IsMarked, (ICallable,Int64,IQArray<IQArray<Int64>>,Int64), Int64>((F, x0, table, n));
        }
    }

    [SourceLocation("D:\\Quantum\\Collision Problem\\Program.qs", OperationFunctor.Body, 115, 128)]
    public partial class Oracle : Operation<(ICallable,IQArray<Qubit>,Int64,IQArray<IQArray<Int64>>,Int64), QVoid>, ICallable
    {
        public Oracle(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(ICallable,IQArray<Qubit>,Int64,IQArray<IQArray<Int64>>,Int64)>, IApplyData
        {
            public In((ICallable,IQArray<Qubit>,Int64,IQArray<IQArray<Int64>>,Int64) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits
            {
                get
                {
                    return Qubit.Concat(((IApplyData)Data.Item1)?.Qubits, ((IApplyData)Data.Item2)?.Qubits);
                }
            }
        }

        String ICallable.Name => "Oracle";
        String ICallable.FullName => "Collision_Problem.Oracle";
        protected ICallable<(ICallable,Int64,IQArray<IQArray<Int64>>,Int64), Int64> IsMarked__
        {
            get;
            set;
        }

        protected IUnitary<Qubit> Microsoft__Quantum__Intrinsic__X
        {
            get;
            set;
        }

        protected Allocate Allocate__
        {
            get;
            set;
        }

        protected Release Release__
        {
            get;
            set;
        }

        protected IUnitary<Qubit> Microsoft__Quantum__Intrinsic__Z
        {
            get;
            set;
        }

        public override Func<(ICallable,IQArray<Qubit>,Int64,IQArray<IQArray<Int64>>,Int64), QVoid> __Body__ => (__in__) =>
        {
            var (F,mark,x0,L,n) = __in__;
#line 117 "D:\\Quantum\\Collision Problem\\Program.qs"
            var phase = (1L - (2L * IsMarked__.Apply((F, x0, L, n))));
#line 118 "D:\\Quantum\\Collision Problem\\Program.qs"
            if ((phase == -(1L)))
            {
#line 119 "D:\\Quantum\\Collision Problem\\Program.qs"
                Microsoft__Quantum__Intrinsic__X.Apply(mark[0L]);
            }

#line hidden
            {
#line 121 "D:\\Quantum\\Collision Problem\\Program.qs"
                var q = Allocate__.Apply(x0);
#line hidden
                bool __arg1__ = true;
                try
                {
#line 122 "D:\\Quantum\\Collision Problem\\Program.qs"
                    Microsoft__Quantum__Intrinsic__Z.Controlled.Apply((mark, q[0L]));
#line 123 "D:\\Quantum\\Collision Problem\\Program.qs"
                    if ((phase == -(1L)))
                    {
#line 124 "D:\\Quantum\\Collision Problem\\Program.qs"
                        Microsoft__Quantum__Intrinsic__X.Apply(mark[0L]);
                    }
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release__.Apply(q);
                    }
                }
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override void __Init__()
        {
            this.IsMarked__ = this.__Factory__.Get<ICallable<(ICallable,Int64,IQArray<IQArray<Int64>>,Int64), Int64>>(typeof(IsMarked));
            this.Microsoft__Quantum__Intrinsic__X = this.__Factory__.Get<IUnitary<Qubit>>(typeof(global::Microsoft.Quantum.Intrinsic.X));
            this.Allocate__ = this.__Factory__.Get<Allocate>(typeof(global::Microsoft.Quantum.Intrinsic.Allocate));
            this.Release__ = this.__Factory__.Get<Release>(typeof(global::Microsoft.Quantum.Intrinsic.Release));
            this.Microsoft__Quantum__Intrinsic__Z = this.__Factory__.Get<IUnitary<Qubit>>(typeof(global::Microsoft.Quantum.Intrinsic.Z));
        }

        public override IApplyData __DataIn__((ICallable,IQArray<Qubit>,Int64,IQArray<IQArray<Int64>>,Int64) data) => new In(data);
        public override IApplyData __DataOut__(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__, ICallable F, IQArray<Qubit> mark, Int64 x0, IQArray<IQArray<Int64>> L, Int64 n)
        {
            return __m__.Run<Oracle, (ICallable,IQArray<Qubit>,Int64,IQArray<IQArray<Int64>>,Int64), QVoid>((F, mark, x0, L, n));
        }
    }

    [SourceLocation("D:\\Quantum\\Collision Problem\\Program.qs", OperationFunctor.Body, 128, 146)]
    public partial class Diffusion : Operation<(Int64,IQArray<Qubit>), QVoid>, ICallable
    {
        public Diffusion(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(Int64,IQArray<Qubit>)>, IApplyData
        {
            public In((Int64,IQArray<Qubit>) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits
            {
                get
                {
                    return ((IApplyData)Data.Item2)?.Qubits;
                }
            }
        }

        String ICallable.Name => "Diffusion";
        String ICallable.FullName => "Collision_Problem.Diffusion";
        protected IAdjointable Microsoft__Quantum__Canon__ApplyToEachA
        {
            get;
            set;
        }

        protected IUnitary<Qubit> Microsoft__Quantum__Intrinsic__H
        {
            get;
            set;
        }

        protected IUnitary<Qubit> Microsoft__Quantum__Intrinsic__X
        {
            get;
            set;
        }

        protected IUnitary<Qubit> Microsoft__Quantum__Intrinsic__Z
        {
            get;
            set;
        }

        public override Func<(Int64,IQArray<Qubit>), QVoid> __Body__ => (__in__) =>
        {
            var (numBits,mark) = __in__;
#line 131 "D:\\Quantum\\Collision Problem\\Program.qs"
            Microsoft__Quantum__Canon__ApplyToEachA.Apply((Microsoft__Quantum__Intrinsic__H, mark));
#line 135 "D:\\Quantum\\Collision Problem\\Program.qs"
            Microsoft__Quantum__Canon__ApplyToEachA.Apply((Microsoft__Quantum__Intrinsic__X, mark));
#line 137 "D:\\Quantum\\Collision Problem\\Program.qs"
            Microsoft__Quantum__Intrinsic__Z.Apply(mark[0L]);
#line 128 "D:\\Quantum\\Collision Problem\\Program.qs"
            Microsoft__Quantum__Canon__ApplyToEachA.Adjoint.Apply((Microsoft__Quantum__Intrinsic__X, mark));
#line 140 "D:\\Quantum\\Collision Problem\\Program.qs"
            Microsoft__Quantum__Canon__ApplyToEachA.Apply((Microsoft__Quantum__Intrinsic__X, mark));
#line 142 "D:\\Quantum\\Collision Problem\\Program.qs"
            Microsoft__Quantum__Canon__ApplyToEachA.Apply((Microsoft__Quantum__Intrinsic__H, mark));
#line 128 "D:\\Quantum\\Collision Problem\\Program.qs"
            Microsoft__Quantum__Canon__ApplyToEachA.Adjoint.Apply((Microsoft__Quantum__Intrinsic__X, mark));
#line 128 "D:\\Quantum\\Collision Problem\\Program.qs"
            Microsoft__Quantum__Canon__ApplyToEachA.Adjoint.Apply((Microsoft__Quantum__Intrinsic__H, mark));
#line hidden
            return QVoid.Instance;
        }

        ;
        public override void __Init__()
        {
            this.Microsoft__Quantum__Canon__ApplyToEachA = this.__Factory__.Get<IAdjointable>(typeof(global::Microsoft.Quantum.Canon.ApplyToEachA<>));
            this.Microsoft__Quantum__Intrinsic__H = this.__Factory__.Get<IUnitary<Qubit>>(typeof(global::Microsoft.Quantum.Intrinsic.H));
            this.Microsoft__Quantum__Intrinsic__X = this.__Factory__.Get<IUnitary<Qubit>>(typeof(global::Microsoft.Quantum.Intrinsic.X));
            this.Microsoft__Quantum__Intrinsic__Z = this.__Factory__.Get<IUnitary<Qubit>>(typeof(global::Microsoft.Quantum.Intrinsic.Z));
        }

        public override IApplyData __DataIn__((Int64,IQArray<Qubit>) data) => new In(data);
        public override IApplyData __DataOut__(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__, Int64 numBits, IQArray<Qubit> mark)
        {
            return __m__.Run<Diffusion, (Int64,IQArray<Qubit>), QVoid>((numBits, mark));
        }
    }

    [SourceLocation("D:\\Quantum\\Collision Problem\\Program.qs", OperationFunctor.Body, 146, 193)]
    public partial class Collision : Operation<(ICallable,Int64), (Int64,Int64)>, ICallable
    {
        public Collision(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(ICallable,Int64)>, IApplyData
        {
            public In((ICallable,Int64) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits
            {
                get
                {
                    return ((IApplyData)Data.Item1)?.Qubits;
                }
            }
        }

        public class Out : QTuple<(Int64,Int64)>, IApplyData
        {
            public Out((Int64,Int64) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits => null;
        }

        String ICallable.Name => "Collision";
        String ICallable.FullName => "Collision_Problem.Collision";
        protected ICallable<String, QVoid> Message__
        {
            get;
            set;
        }

        protected ICallable<(Int64,Int64), IQArray<Int64>> GeneraterandomInt__
        {
            get;
            set;
        }

        protected ICallable Microsoft__Quantum__Arrays__ConstantArray
        {
            get;
            set;
        }

        protected ICallable<Int64, Int64> GetRandomIndex__
        {
            get;
            set;
        }

        protected ICallable Microsoft__Quantum__Arrays__Zipped
        {
            get;
            set;
        }

        protected ICallable Microsoft__Quantum__Arrays__Sorted
        {
            get;
            set;
        }

        protected ICallable<((Int64,Int64),(Int64,Int64)), Boolean> CompareSecond__
        {
            get;
            set;
        }

        protected ICallable Microsoft__Quantum__Arrays__TupleArrayAsNestedArray
        {
            get;
            set;
        }

        protected ICallable<(ICallable,Int64,IQArray<IQArray<Int64>>), Int64> GroverSearch__
        {
            get;
            set;
        }

        public override Func<(ICallable,Int64), (Int64,Int64)> __Body__ => (__in__) =>
        {
            var (F,KI) = __in__;
#line 148 "D:\\Quantum\\Collision Problem\\Program.qs"
            var X_ = (1L << (int)KI);
#line 149 "D:\\Quantum\\Collision Problem\\Program.qs"
            Message__.Apply(String.Format("Search Space: ({0})", X_));
#line 152 "D:\\Quantum\\Collision Problem\\Program.qs"
            var KB = (IQArray<Int64>)GeneraterandomInt__.Apply((X_, KI));
#line 154 "D:\\Quantum\\Collision Problem\\Program.qs"
            var Fx = new QArray<Int64>(Microsoft__Quantum__Arrays__ConstantArray.Apply<IQArray<Int64>>((KI, 0L)));
#line 155 "D:\\Quantum\\Collision Problem\\Program.qs"
            var x_array = new QArray<Int64>(Microsoft__Quantum__Arrays__ConstantArray.Apply<IQArray<Int64>>((KI, 0L)));
#line 156 "D:\\Quantum\\Collision Problem\\Program.qs"
            foreach (var i in new QRange(0L, (KI - 1L)))
#line hidden
            {
#line 157 "D:\\Quantum\\Collision Problem\\Program.qs"
                var index = GetRandomIndex__.Apply((KI - 1L));
#line 158 "D:\\Quantum\\Collision Problem\\Program.qs"
                var x = KB[index];
#line 159 "D:\\Quantum\\Collision Problem\\Program.qs"
                var fx = F.Apply<Int64>((x, X_));
#line 160 "D:\\Quantum\\Collision Problem\\Program.qs"
                Fx.Modify(i, fx);
#line 161 "D:\\Quantum\\Collision Problem\\Program.qs"
                x_array.Modify(i, x);
            }

#line 164 "D:\\Quantum\\Collision Problem\\Program.qs"
            var L = new QArray<(Int64,Int64)>(Microsoft__Quantum__Arrays__Zipped.Apply<IQArray<(Int64,Int64)>>((x_array?.Copy(), Fx?.Copy())));
#line 165 "D:\\Quantum\\Collision Problem\\Program.qs"
            var sorted_L = (IQArray<(Int64,Int64)>)Microsoft__Quantum__Arrays__Sorted.Apply<IQArray<(Int64,Int64)>>((CompareSecond__, L?.Copy()));
#line 166 "D:\\Quantum\\Collision Problem\\Program.qs"
            Message__.Apply(String.Format("Table L: ({0})", L));
#line 169 "D:\\Quantum\\Collision Problem\\Program.qs"
            Message__.Apply(String.Format("Sorted Table L: ({0})", sorted_L));
#line 170 "D:\\Quantum\\Collision Problem\\Program.qs"
            var Table = new QArray<IQArray<Int64>>(Microsoft__Quantum__Arrays__TupleArrayAsNestedArray.Apply<IQArray<IQArray<Int64>>>(sorted_L));
#line 171 "D:\\Quantum\\Collision Problem\\Program.qs"
            Message__.Apply(String.Format("Table in Array Form: {0}", Table));
#line 174 "D:\\Quantum\\Collision Problem\\Program.qs"
            foreach (var i in new QRange(0L, (KI - 2L)))
#line hidden
            {
#line 175 "D:\\Quantum\\Collision Problem\\Program.qs"
                if ((Table[i][1L] == Table[(i + 1L)][1L]))
                {
#line 177 "D:\\Quantum\\Collision Problem\\Program.qs"
                    return (i, (i + 1L));
                }
            }

#line 182 "D:\\Quantum\\Collision Problem\\Program.qs"
            var x1 = GroverSearch__.Apply((F, X_, Table?.Copy()));
#line 184 "D:\\Quantum\\Collision Problem\\Program.qs"
            foreach (var i in new QRange(0L, (KI - 2L)))
#line hidden
            {
#line 185 "D:\\Quantum\\Collision Problem\\Program.qs"
                if ((Table[i][0L] == x1))
                {
#line 187 "D:\\Quantum\\Collision Problem\\Program.qs"
                    return (i, -(1L));
                }
            }

#line 190 "D:\\Quantum\\Collision Problem\\Program.qs"
            return (KI, 1L);
        }

        ;
        public override void __Init__()
        {
            this.Message__ = this.__Factory__.Get<ICallable<String, QVoid>>(typeof(global::Microsoft.Quantum.Intrinsic.Message));
            this.GeneraterandomInt__ = this.__Factory__.Get<ICallable<(Int64,Int64), IQArray<Int64>>>(typeof(GeneraterandomInt));
            this.Microsoft__Quantum__Arrays__ConstantArray = this.__Factory__.Get<ICallable>(typeof(global::Microsoft.Quantum.Arrays.ConstantArray<>));
            this.GetRandomIndex__ = this.__Factory__.Get<ICallable<Int64, Int64>>(typeof(GetRandomIndex));
            this.Microsoft__Quantum__Arrays__Zipped = this.__Factory__.Get<ICallable>(typeof(global::Microsoft.Quantum.Arrays.Zipped<,>));
            this.Microsoft__Quantum__Arrays__Sorted = this.__Factory__.Get<ICallable>(typeof(global::Microsoft.Quantum.Arrays.Sorted<>));
            this.CompareSecond__ = this.__Factory__.Get<ICallable<((Int64,Int64),(Int64,Int64)), Boolean>>(typeof(CompareSecond));
            this.Microsoft__Quantum__Arrays__TupleArrayAsNestedArray = this.__Factory__.Get<ICallable>(typeof(global::Microsoft.Quantum.Arrays.TupleArrayAsNestedArray<>));
            this.GroverSearch__ = this.__Factory__.Get<ICallable<(ICallable,Int64,IQArray<IQArray<Int64>>), Int64>>(typeof(GroverSearch));
        }

        public override IApplyData __DataIn__((ICallable,Int64) data) => new In(data);
        public override IApplyData __DataOut__((Int64,Int64) data) => new Out(data);
        public static System.Threading.Tasks.Task<(Int64,Int64)> Run(IOperationFactory __m__, ICallable F, Int64 KI)
        {
            return __m__.Run<Collision, (ICallable,Int64), (Int64,Int64)>((F, KI));
        }
    }

    [SourceLocation("D:\\Quantum\\Collision Problem\\Program.qs", OperationFunctor.Body, 193, 199)]
    public partial class Fun : Function<(Int64,Int64), Int64>, ICallable
    {
        public Fun(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(Int64,Int64)>, IApplyData
        {
            public In((Int64,Int64) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits => null;
        }

        String ICallable.Name => "Fun";
        String ICallable.FullName => "Collision_Problem.Fun";
        protected ICallable<(Int64,Int64), Int64> Microsoft__Quantum__Math__PowI
        {
            get;
            set;
        }

        protected ICallable<(Int64,Int64), Int64> Microsoft__Quantum__Math__ModI
        {
            get;
            set;
        }

        public override Func<(Int64,Int64), Int64> __Body__ => (__in__) =>
        {
            var (x,N) = __in__;
#line 194 "D:\\Quantum\\Collision Problem\\Program.qs"
            var xSquared = Microsoft__Quantum__Math__PowI.Apply((x, 2L));
#line 195 "D:\\Quantum\\Collision Problem\\Program.qs"
            var remainder = Microsoft__Quantum__Math__ModI.Apply((xSquared, N));
#line 196 "D:\\Quantum\\Collision Problem\\Program.qs"
            return remainder;
        }

        ;
        public override void __Init__()
        {
            this.Microsoft__Quantum__Math__PowI = this.__Factory__.Get<ICallable<(Int64,Int64), Int64>>(typeof(global::Microsoft.Quantum.Math.PowI));
            this.Microsoft__Quantum__Math__ModI = this.__Factory__.Get<ICallable<(Int64,Int64), Int64>>(typeof(global::Microsoft.Quantum.Math.ModI));
        }

        public override IApplyData __DataIn__((Int64,Int64) data) => new In(data);
        public override IApplyData __DataOut__(Int64 data) => new QTuple<Int64>(data);
        public static System.Threading.Tasks.Task<Int64> Run(IOperationFactory __m__, Int64 x, Int64 N)
        {
            return __m__.Run<Fun, (Int64,Int64), Int64>((x, N));
        }
    }

    [SourceLocation("D:\\Quantum\\Collision Problem\\Program.qs", OperationFunctor.Body, 199, -1)]
    public partial class FindCollision : Operation<QVoid, QVoid>, ICallable
    {
        public FindCollision(IOperationFactory m) : base(m)
        {
        }

        String ICallable.Name => "FindCollision";
        String ICallable.FullName => "Collision_Problem.FindCollision";
        public static EntryPointInfo<QVoid, QVoid> Info => new EntryPointInfo<QVoid, QVoid>(typeof(FindCollision));
        protected ICallable<(ICallable,Int64), (Int64,Int64)> Collision__
        {
            get;
            set;
        }

        protected ICallable<(Int64,Int64), Int64> Fun__
        {
            get;
            set;
        }

        protected ICallable<String, QVoid> Message__
        {
            get;
            set;
        }

        public override Func<QVoid, QVoid> __Body__ => (__in__) =>
        {
#line 200 "D:\\Quantum\\Collision Problem\\Program.qs"
            var KI = 10L;
#line 201 "D:\\Quantum\\Collision Problem\\Program.qs"
            var (i,j) = Collision__.Apply((Fun__, KI));
#line 202 "D:\\Quantum\\Collision Problem\\Program.qs"
            if ((i == -(1L)))
            {
#line 203 "D:\\Quantum\\Collision Problem\\Program.qs"
                Message__.Apply(String.Format("Collision found at Value: ({0})", i));
            }
            else
            {
#line 205 "D:\\Quantum\\Collision Problem\\Program.qs"
                Message__.Apply(String.Format("Collision found at index: ({0}, {1})", i, j));
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override void __Init__()
        {
            this.Collision__ = this.__Factory__.Get<ICallable<(ICallable,Int64), (Int64,Int64)>>(typeof(Collision));
            this.Fun__ = this.__Factory__.Get<ICallable<(Int64,Int64), Int64>>(typeof(Fun));
            this.Message__ = this.__Factory__.Get<ICallable<String, QVoid>>(typeof(global::Microsoft.Quantum.Intrinsic.Message));
        }

        public override IApplyData __DataIn__(QVoid data) => data;
        public override IApplyData __DataOut__(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__)
        {
            return __m__.Run<FindCollision, QVoid, QVoid>(QVoid.Instance);
        }
    }
}